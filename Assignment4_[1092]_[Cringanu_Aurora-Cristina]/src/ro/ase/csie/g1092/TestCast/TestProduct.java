package ro.ase.csie.g1092.TestCast;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.experimental.categories.Category;

import ro.ase.csie.g1092.Product;
import ro.ase.csie.g1092.Exceptions.ExceptionProductInvalidName;
import ro.ase.csie.g1092.Exceptions.ExceptionProductInvalidPriceValues;
import ro.ase.csie.g1092.Exceptions.ExceptionProductInvalidSoldItems;
import ro.ase.csie.g1092.TestCast.testCategory.ImportantTest;
import ro.ase.csie.g1092.TestCast.testCategory.PerformanceTest;

public class TestProduct {
	public static final String NAME = "coffe";
	public static final float PRICE  = 5;
	public static final ArrayList<Integer> WEEKLYSOLDITEMS = new ArrayList<>();
	Product product1;

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		WEEKLYSOLDITEMS.add(4);
		WEEKLYSOLDITEMS.add(2);
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
		product1 = new Product(NAME, PRICE,WEEKLYSOLDITEMS);
	}

	@After
	public void tearDown() throws Exception {
	}

	@Ignore
	@Test
	public void test() {
		fail("Not yet implemented");
	}
	@Category(ImportantTest.class)
	@Test
	public void testConstructorRightInitializationAllAtributes() throws ExceptionProductInvalidSoldItems {
		
		Product product1 =  new Product(NAME, PRICE, WEEKLYSOLDITEMS);
		
		assertEquals("Name is not correct", 
				NAME, product1.getName());
		assertEquals("Price is not correct", PRICE, product1.getPrice(),0.0001);
		for(int i = 0; i < WEEKLYSOLDITEMS.size(); i++) {
			assertEquals("sales not initialized correctly",
					(int)WEEKLYSOLDITEMS.get(i), product1.getSoldItems(i));
		}
	}
	@Category(ImportantTest.class)
	@Test
	public void TestConstructorRightInitializationTwoAtributes() {

		Product product1 =  new Product(NAME, PRICE);
		
		assertEquals("Name is not correct", 
				NAME, product1.getName());
		assertEquals("Price is not correct", PRICE, product1.getPrice(),0.0001);
	}
	@Category({ImportantTest.class, PerformanceTest.class})
	@Test
	public void testConstructorRightCreateObject() {
		try {
			Product product1 =  new Product(NAME, PRICE, WEEKLYSOLDITEMS);
			assertNotNull(product1);
		}
		catch(Exception e) {
			fail("The constructor generated an exception for ok values");
		}			
	}
	@Test(expected = ExceptionProductInvalidSoldItems.class)
	public void testConstructorRightCreateArrayList() throws ExceptionProductInvalidSoldItems{
		ArrayList<Integer> salesNull = new ArrayList<>();
		try {
			Product product2 =  new Product(NAME, PRICE, salesNull);
			
			for(int i = 0; i < salesNull.size(); i++) {
				assertEquals("sales not initialized correctly",
						(int)salesNull.get(i), product2.getSoldItems(i));
			}
		}
		catch(ExceptionProductInvalidSoldItems e) {
			fail("The constructor generated an exception for ok values");
		}			
	}
	
	@Test(expected = ExceptionProductInvalidSoldItems.class)
	public void testSoldItemsExistenceSalesNull() throws ExceptionProductInvalidSoldItems {
		ArrayList<Integer> salesNull = null;
		try {
			product1.setSales(salesNull);
		} catch (ExceptionProductInvalidSoldItems e) {
			fail("Exeption generated by setSales");
		}
		product1.setSales(salesNull);

	}
	/*
	@Test(expected = ExceptionProductInvalidPriceValues.class)
	public void testPriceExistenceTwoAttributesNull() throws ExceptionProductInvalidPriceValues {
		float priceNull = (Float) null;
		Product product1 =  new Product(NAME, priceNull);
	}
	@Test(expected = ExceptionProductInvalidName.class)
	public void testNameExistenceTwoAttributesNull() throws ExceptionProductInvalidName {
		String nameNull = null;
		Product product1 =  new Product(nameNull, PRICE);
	}
	@Test(expected = ExceptionProductInvalidPriceValues.class)
	public void testPriceExistenceAllAttributesNull() throws ExceptionProductInvalidPriceValues {
		float priceNull = (Float) null;
		try {
			product1.setPrice(priceNull);
		} catch (ExceptionProductInvalidPriceValues e) {
			fail("Exeption generated by setPrice");
		}

		Product product1 =  new Product(NAME, priceNull,WEEKLYSOLDITEMS );
	}
	@Test(expected = ExceptionProductInvalidName.class)
	public void testNameExistenceAllAttributesNull() throws ExceptionProductInvalidName {
		String nameNull = null;
		Product product1 =  new Product(nameNull, PRICE, WEEKLYSOLDITEMS);
	}
	*/
}
